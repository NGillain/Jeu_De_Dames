ALGORITHME POUR LA VERIFICATION DE LA VALIDITE D'UNE SEQUENCE
-------------------------------------------------------------

Voici la liste des mouvements autorisés por le jeu de dame (règles internationales)

POINTS COMMUNS
--------------

- seul déplacement en diagonal autorisé ==> abs(X_new-X_old)==abs(Y_new-Y_old)
- interdit de se placer sur une case déjà occupée ==> game->board[X_new][Y_new] == EMPTY
- pas de move hors du plateau de jeu ==> 0 < X_new, Y_new < game->xsize

Ensuite, viennent les spécificités de chaque pièces :

DAME SANS PRISE
---------------

Communes +

- il ne faut pas de pion de la même couleur sur le chemin ==>
int vec_X = (X_new-X_old)/Abs(X_new-X_old);
int vec_Y = (Y_new-Y_old)/Abs(Y_new-Y_old);
for(int a=1; a=<(X_new-X_old); a++){
  if(is_blanc(X_old, Y_old) == is_blanc(X_old+a*vec_X, Y_old+a*vec_Y)){
    return 0;
  }
}
//if(game->board[x_old+a*(xold-xnew)/(abs(xold-xnew)][y_old+a*(yold-ynew)/(abs(yold-ynew)])


DAME AVEC PRISE
---------------

En plus des conditions communes

- il doit y avoir un pion/une dame sur la case juste avant la nouvelle position si dernier move_seq
==>
if(move_seq->next == NULL && game->board[X_new-(vec_X)][Y_new-vec_Y]==EMPTY){
  return 0;
}
- il ne faut pas plus d'un pion de la couleur opposée sur le chemin ==>
int vec_X = (X_new-X_old)/Abs(X_new-X_old);
int vec_Y = (Y_new-Y_old)/Abs(Y_new-Y_old);
int temp=0;
for(int a=1; ;a++){
  if(is_blanc(X_old, Y_old) != is_blanc(X_old+a*vec_X, Y_old+a*vec_Y)){
    temp++;
  }
  if(temp>1){
    return 0;
  }
}

PIONS GENERALITES
-----------------

Conditions pour les moves de pions

- Un pion ne peut pas se déplacer plus de trois cases en diagonale
==> Abs(X_new-X_old)<3 //conditions sur X et Y grace a la condition plus haut

PION NOIR SANS PRISE
--------------------

Communs +

- déplacement d'une seule case ==> Abs(X_new-X_old)==1 //conditions d'égalité entre dX et dY supposé vraie
- déplacement vers l'arrière intredit si pas de prise ==> Y_new-Y_old>0

PION NOIR AVEC PRISE
--------------------

Communs +

- déplacement de deux cases ==> Abs(X_new-X_old)==2 //conditions d'égalité entre dX et dY supposé vraie
- il doit y avoir une pièce blanche entre la case de départ et la case d'arrivée
==> !is_blanc(game->board, (X_new+X_old)/2, (Y_new+Y_old)/2) && EMPTY
return 0;

PION BLANC SANS PRISE
---------------------

Communs +

- déplacement d'une seule case ==> Abs(X_new-X_old)==1 //conditions d'égalité entre dX et dY supposé vraie
- déplacement vers l'arrière intredit si pas de prise ==> Y_new-Y_old<0

PION BLANC AVEC PRISE
---------------------

Communs +

- déplacement de deux cases ==> Abs(X_new-X_old)==2 //conditions d'égalité entre dX et dY supposé vraie
- il doit y avoir une pièce noire entre la case de départ et la case d'arrivée
==> is_blanc(game->board, (X_new+X_old)/2, (Y_new+Y_old)/2) && EMPTY
return 0;
